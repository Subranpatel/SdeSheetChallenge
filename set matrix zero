//Brute Force   TC=(M*N) SC=(M+N)

#include <bits/stdc++.h> 
void makeZeroes(vector<vector<int>>& matrix , int i, int j)
{
        int m=matrix.size();
        int n=matrix[0].size();
        // Making rows zero
        for(int k=0;k<n;k++){
            matrix[i][k] = 0;
        }
        // Making columns zero
        for(int k=0;k<m;k++){
            matrix[k][j] = 0;
        }
   }
void setZeros(vector<vector<int>> &matrix)
{
	 int m=matrix.size();
        int n=matrix[0].size();
        vector<int> rows;
        vector<int> cols;
        
        //storing zero 
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j]==0){
                    rows.push_back(i);
                    cols.push_back(j);
                }
            }
        }
        for(int i=0;i<rows.size();i++){
            makeZeroes(matrix,rows[i],cols[i]);
        }
    }
    
    
 //Optimal Solution  TC=(M*N) SC=(1)
 
 #include <bits/stdc++.h> 
void setZeros(vector<vector<int>> &matrix)
{
      int row=matrix.size();
        int col=matrix[0].size();
        bool firstCol=false,firstRow=false;
        for(int i=0;i<row;i++){
            if(matrix[i][0]==0)
            {
                firstCol=true;
                break;
            }}
        
        for(int i=0;i<col;i++){
          if(matrix[0][i]==0)
            {
                firstRow=true;
                break;
            }}
        
        for(int i=1;i<row;i++){
            for(int j=1;j<col;j++){
                if(matrix[i][j]==0)
                {
                    matrix[0][j]=0;
                    matrix[i][0]=0;
                }}
        }
        
        for(int i=1;i<row;i++){
            for(int j=1;j<col;j++){
                if(matrix[i][0]==0 || matrix[0][j]==0)
                    matrix[i][j]=0;
            }}
        
        if(firstRow){
            for(int i=0;i<col;i++)
                matrix[0][i]=0;
        }
        
        if(firstCol){
            for(int i=0;i<row;i++)
                matrix[i][0]=0;
        }
        
}
